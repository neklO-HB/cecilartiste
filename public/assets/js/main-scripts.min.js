(() => {
  function initRevealAnimations() {
    const revealElements = document.querySelectorAll('.reveal-on-scroll');
    if (!revealElements.length) {
      return;
    }

    if ('IntersectionObserver' in window) {
      const observer = new IntersectionObserver(
        entries => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.classList.add('is-visible');
              observer.unobserve(entry.target);
            }
          });
        },
        { threshold: 0.15, rootMargin: '0px 0px -40px 0px' }
      );
      revealElements.forEach(element => observer.observe(element));
    } else {
      revealElements.forEach(element => element.classList.add('is-visible'));
    }
  }

  function animateInsight(el) {
    const rawTarget = parseInt(el.dataset.count || '', 10);
    const target = Number.isFinite(rawTarget) ? rawTarget : 0;
    const valueHolder = el.querySelector('dt');
    if (!valueHolder) {
      return;
    }

    if (target <= 0) {
      valueHolder.textContent = '0';
      return;
    }

    const start = performance.now();
    const duration = 1400;

    function tick(now) {
      const progress = Math.min((now - start) / duration, 1);
      const eased = 1 - Math.pow(1 - progress, 3);
      const current = Math.round(target * eased);
      valueHolder.textContent = current.toLocaleString('fr-FR');
      if (progress < 1) {
        requestAnimationFrame(tick);
      }
    }

    requestAnimationFrame(tick);
  }

  function initInsightCounters() {
    const insightBlocks = document.querySelectorAll('.studio-insight[data-count]');
    if (!insightBlocks.length) {
      return;
    }

    insightBlocks.forEach(block => {
      const valueHolder = block.querySelector('dt');
      if (valueHolder) {
        valueHolder.textContent = '0';
      }
    });

    if ('IntersectionObserver' in window) {
      const observer = new IntersectionObserver(
        entries => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              animateInsight(entry.target);
              observer.unobserve(entry.target);
            }
          });
        },
        { threshold: 0.4 }
      );
      insightBlocks.forEach(block => observer.observe(block));
    } else {
      insightBlocks.forEach(block => animateInsight(block));
    }
  }

  function enhanceServiceCards() {
    const cards = document.querySelectorAll('.creative-service');
    if (!cards.length) {
      return;
    }

    cards.forEach(card => {
      card.addEventListener('mouseenter', () => {
        cards.forEach(other => other.classList.remove('is-active'));
        card.classList.add('is-active');
      });
      card.addEventListener('mouseleave', () => {
        card.classList.remove('is-active');
      });
      card.addEventListener('focusin', () => {
        cards.forEach(other => other.classList.remove('is-active'));
        card.classList.add('is-active');
      });
      card.addEventListener('focusout', () => {
        card.classList.remove('is-active');
      });
    });
  }

  document.addEventListener('DOMContentLoaded', () => {
    initRevealAnimations();
    initInsightCounters();
    enhanceServiceCards();
  });
})();
